// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	//A vagy C utasítás (az instruction felsõ bitje alapján)?
	And(a = instruction[15], b = true, out = fCStm);
	Not(in = fCStm, out = fAStm);
	
	Not(in = reset, out = notReset);

	//ALU 
	//az instruction 12-es bitje mondja meg, hogy az aluba az a regiszter értékét, vagy az általa mutatott memóriaterület értékét kell bekötni.
	Mux16(a = aregisterOut, b = inM, sel = instruction[12], out = aluY);
	
	//az alu x lába mindenképp a d regiszter értéke lesz.
	ALU(y = aluY, x = dregisterIn, 
	    zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6],
 	    zr = aluZr, ng = aluNg, out = aluOut, out = outM);
	
	//hova tárolunk?
	//akkor kell A regisztert beállítani, ha a flag azt monsja, vagy fAStm esetén
	Or(a = instruction[5], b = fAStm, out = stA);
	//a másik két helyre csak cstm esetén írunk, ha a flag is azt mondja:
	And(a = instruction[4], b = fCStm, out = stD);
	//stM csak akkor igaz ha nem reset
	And4Way(a = instruction[3], b = fCStm, c=notReset, d=notReset, out = writeM);
		
	//kell-e ugrani?
	Or(a = aluZr, b = aluNg, out = aluPzT);
	Not(in = aluPzT, out = aluPz);
	
	And(a = aluNg,  b = instruction[2], out = fJmpNg);
	And(a = aluZr,  b = instruction[1], out = fJmpZr);
	And(a = aluPz,  b = instruction[0], out = fJmpPz);
	Or4Way(a = fJmpNg, b = fJmpZr, c = fJmpPz, out = fJmpAlu);
	
	//csak akkor érdekes, ha fCstm
	And(a = fJmpAlu, b = fCStm, out = fJmp);

	//A regiszter
	//A regiszter értéke vagy a bemenetrõl jön (fAStm), vagy az aluból (fCStm)
	Mux16(a[0..14] = instruction[0..14], b = aluOut, sel = fCStm, out = aregisterIn);
	ARegister(in = aregisterIn, load = stA, out[0..14] = addressM, out = aregisterOut, out[0..14] = aregisterOut15);

    //D regiszter
	//D-be az alu kimenetét kötjük de csak akkor állítjuk be, ha stD igaz
	DRegister(in = aluOut, load = stD, out = dregisterIn);

	//pc: alapból inc, ha reset akkor reset, ha fJmp akkor meg az a regiszter értéke
	PC(in[0..14] = aregisterOut15, load = fJmp, reset = reset, inc = true, out[0..14] = pc);
}